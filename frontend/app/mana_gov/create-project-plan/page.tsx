"use client"; // This is a client-side component

import { useEffect, useState } from 'react';
import ProjectPlanForm from '../components/ProjectPlanForm';
import '../styles.css';

// Define the main component
export default function CreateProjectPlanPage() {
  const [proposals, setProposals] = useState<{ id: number; title: string; manaHoursBudgeted?: number }[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch list of approved and active proposals
  useEffect(() => {
    async function fetchProposals() {
      try {
        const response = await fetch('/api/proposals/approved-active'); // Adjust the endpoint as necessary
        if (!response.ok) {
          throw new Error('Failed to fetch proposals');
        }
        const data = await response.json();
        setProposals(data); // Populate proposals
      } catch (err) {
        console.error('Error fetching proposals:', err);
        setProposals([]); // Set empty array if an error occurs
      } finally {
        setLoading(false);
      }
    }

    fetchProposals();
  }, []);

  // Define the addProjectPlan function with derived defaults from Proposal
  const addProjectPlan = (projectPlan: {
    proposalId: number;
    projectName: string;
    totalManaHours: number;
  }) => {
    // Find the associated Proposal to derive defaults
    const associatedProposal = proposals.find(proposal => proposal.id === projectPlan.proposalId);

    // Derive default values from the associated Proposal
    const fullProjectPlan = {
      ...projectPlan,
      id: Date.now(), // Replace with actual ID if generated by the backend
      proposalId: associatedProposal?.id || projectPlan.proposalId, // Ensure the proposalId is set correctly
      votingPowerPercentage: 0, // Default value, can be calculated or set as needed
      createdAt: new Date().toISOString(),
      updatedAt: null,
      developers: {}, // Initialize as empty; replace with actual developer data if available
      totalManaHours: associatedProposal?.manaHoursBudgeted || projectPlan.totalManaHours,
    };

    console.log('Project plan submitted:', fullProjectPlan);
    // Handle project plan submission (e.g., send it to an API or save to a database)
  };

  // Show a loading indicator while fetching data
  if (loading) {
    return <div>Loading...</div>;
  }

  // Render the page with the Project Plan Form
  return (
    <div className="create-project-plan-page">
      <header className="text-white text-xl font-bold">
        <div className="title flex-grow text-center">
          <h1 className="text-white text-xl font-bold">Create New Project Plan</h1>
        </div>
      </header>

      <section className="project-plan-form">
        <ProjectPlanForm addProjectPlan={addProjectPlan} proposals={proposals} />
      </section>
    </div>
  );
}
